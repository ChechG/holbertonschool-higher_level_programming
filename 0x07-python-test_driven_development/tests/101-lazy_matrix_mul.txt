The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------
Importing function:
        >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Case two list of lists (Success):
        >>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
        [[13 16]]

Case where columns are not the same:
        >>> lazy_matrix_mul([[1, 2, 7]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (1,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Case with lists of ints and floats:
        >>> lazy_matrix_mul([[1, 2.1]], [[3, 4], [5, 6]])
        [[13.5 16.6]]

Case with list of numbers and a string:
        >>> lazy_matrix_mul([[1, 2.1]], "hello")
        Traceback (most recent call last):
        ...
        ValueError: Scalar operands are not allowed, use '*' instead

Case with string as argument instead of matrix:
        >>> lazy_matrix_mul("hello", [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: Scalar operands are not allowed, use '*' instead

Case with empty list of lists:
        >>> lazy_matrix_mul([[]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Case with empty list of lists:
        >>> lazy_matrix_mul([[3, 4], [5, 6]], [[]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


Case with empty list of lists:
        >>> lazy_matrix_mul([], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Case with empty list of lists:
        >>> lazy_matrix_mul([[3, 4], [5, 6]], [])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Case with list (but not of lists):
        >>> lazy_matrix_mul([1], [2])
        2

Case with second argument list (but not of lists):
        >>> lazy_matrix_mul([[3, 4], [5, 6]], [2])
        Traceback (most recent call last):
        ...
        ValueError: shapes (2,2) and (1,) not aligned: 2 (dim 1) != 1 (dim 0)

Case with string as element of m_a:
        >>> lazy_matrix_mul([[1, "hello"]], [[3, 4], [5, 6]])
        Traceback (most recent call last):
        ...
        TypeError: invalid data type for einsum

Case with string as element of m_b:
        >>> lazy_matrix_mul([[1, 2]], [[3, "hello"], [5, 6]])
        Traceback (most recent call last):
        ...
        TypeError: invalid data type for einsum

Case with different size of lists inside m_b:
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 7], [3, 4]])
        Traceback (most recent call last):
        ...
        ValueError: setting an array element with a sequence.

Case with different size of lists inside m_a:
        >>> lazy_matrix_mul([[1, 2], [3, 4, 7]], [[1, 2], [3, 4]])
        Traceback (most recent call last):
        ...
        ValueError: setting an array element with a sequence.