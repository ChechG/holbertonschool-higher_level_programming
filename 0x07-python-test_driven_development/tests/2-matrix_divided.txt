The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------
Importing function:
        >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Case of success:
        >>> matrix_divided([[1, 2.2, 3], [4, 5, 6]], 3)
        [[0.33, 0.73, 1.0], [1.33, 1.67, 2.0]]

Case with float, int and div is int:
        >>> matrix_divided([[1, 2.2, 3], [4, 5, 6]], 3)
        [[0.33, 0.73, 1.0], [1.33, 1.67, 2.0]]

Case with one element not int or float:
        >>> matrix_divided([[1, 2, 3], [4, 5, "hello"]], 3)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Case with different list sizes:
        >>> matrix_divided([[1, 2, 3, 7], [4, 5, 6]], 3)
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

Case where div is NOT an int:
        >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "hello")
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

Case where all elements are int:
        >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

Case with with a list of float and other of int:
        >>> matrix_divided([[1.1, 2.2, 3.3], [4, 5, 6]], 3)
        [[0.37, 0.73, 1.1], [1.33, 1.67, 2.0]]

Case with with a list of int and other of float:
        >>> matrix_divided([[4, 5, 6], [1.1, 2.2, 3.3]], 3)
        [[1.33, 1.67, 2.0], [0.37, 0.73, 1.1]]

