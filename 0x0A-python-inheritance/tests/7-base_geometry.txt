The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------
Importing function:
        >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test success (one string and one int):
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", 1)

Test comparing dirs:
        >>> dir(bg) == dir(BaseGeometry)
        True

Test one string and a negative number:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", -4)
        Traceback (most recent call last):
        ...
        ValueError: width must be greater than 0

Test one string and 0:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", 0)
        Traceback (most recent call last):
        ...
        ValueError: width must be greater than 0

Test one string and a float:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", 4.5)
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test two ints:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(2, 4)

Test string and tuple:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", (1, 2))
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test string and tuple:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", (1, ))
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test string and dictionary:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", {1, 2})
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test with one list element:
        >>> bg.integer_validator("Test", [3])
        Traceback (most recent call last):
        ...
        TypeError: Test must be an integer

Test string and list:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", [1, 2])
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test with None as 2nd parameter:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", None)
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test with no argument:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator()
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test with bool as 2nd parameter:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", True)
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test one string and a negative float:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("width", -4.5)
        Traceback (most recent call last):
        ...
        TypeError: width must be an integer

Test with None as both parameters:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(None, None)
        Traceback (most recent call last):
        ...
        TypeError: None must be an integer

Test with None as both parameters:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(None)
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'



