The ``1-my_list`` module
======================

Using ``MyList``
-------------------
Importing function:
        >>> MyList = __import__('1-my_list').MyList

Test success (all positive integers):
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(16)
        >>> my_list.append(8)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        [1, 4, 8, 16]

Test append list(MyList):
        >>> my_list = MyList()
        >>> o_list = MyList()
        >>> o_list.append(2)
        >>> my_list.append(1)
        >>> my_list.append(16)
        >>> my_list.append(o_list)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: MyList() < int()

Test negative numbers:
        >>> my_list = MyList()
        >>> my_list.append(4)
        >>> my_list.append(1)
        >>> my_list.append(-10)
        >>> my_list.print_sorted()
        [-10, 1, 4]

Test all negative numbers:
        >>> my_list = MyList()
        >>> my_list.append(-4)
        >>> my_list.append(-1)
        >>> my_list.append(-10)
        >>> my_list.print_sorted()
        [-10, -4, -1]

Test only one element in list:
        >>> my_list = MyList()
        >>> my_list.append(10)
        >>> my_list.print_sorted()
        [10]


Test empty list:
        >>> my_list = MyList()
        >>> my_list.print_sorted()
        []

Test with already created list:
        >>> new_list = [1, 2, 3]
        >>> new_list.print_sorted()
        Traceback (most recent call last):
        ...
        AttributeError: 'list' object has no attribute 'print_sorted'

Test list with one string:
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append("hello")
        >>> my_list.append(8)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: str() < int()

Test with only strings:
        >>> my_list = MyList()
        >>> my_list.append("hello")
        >>> my_list.append("my")
        >>> my_list.append("friend")
        >>> my_list.print_sorted()
        ['friend', 'hello', 'my']

Test with list appending 'None':
        >>> my_list = MyList()
        >>> my_list.append(None)
        >>> my_list.print_sorted()
        [None]

Test with list appending two Nones:
        >>> my_list = MyList()
        >>> my_list.append(None)
        >>> my_list.append(None)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: NoneType() < NoneType()

Test with one float and int:
        >>> my_list = MyList()
        >>> my_list.append(8)
        >>> my_list.append(4.6)
        >>> my_list.print_sorted()
        [4.6, 8]

Test with only floats:
        >>> my_list = MyList()
        >>> my_list.append(1.5)
        >>> my_list.append(1.6)
        >>> my_list.append(8.7)
        >>> my_list.append(4.2)
        >>> my_list.print_sorted()
        [1.5, 1.6, 4.2, 8.7]

Test with impossible number:
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(16)
        >>> my_list.append(5j)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: complex() < int()

Test with big number:
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(16)
        >>> my_list.append(1e100)
        >>> my_list.append(4)
        >>> my_list.print_sorted()
        [1, 4, 16, 1e+100]

